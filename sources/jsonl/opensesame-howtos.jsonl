{"content": "In OpenSesame, the backend is the software library that is used to run the experiment. To switch between different backends in OpenSesame:\n\n1. Open your experiment script in OpenSesame.\n2. Open the Experiment Properties tab by clicking on the top-level item in the overview area.\n3. Locate the \"Run experiment\" option.\n4. Select the desired backend:\n    - On the desktop with PsychoPy (psycho)\n    - On the desktop with Expyriment (xpyriment)\n    - On the desktop with PyGame (legacy)\n    - In a browser with OSWeb (osweb)\n5. Save your experiment and run it to test if the experiment works as expected.", "url": "https://forum.cogsci.nl", "title": "How to switch between different backends in OpenSesame"}
{"content": "To diagnose and fix crash issues in OpenSesame:\n\n1. Run your experiment script in OpenSesame with the debug window open (View > Show console).\n2. When the crash occurs, check the console for any error messages or tracebacks that can help identify the cause of the crash.\n3. If an error message is displayed, search for the error online in the OpenSesame documentation, forums, or general programming resources to find potential solutions.\n4. Review your experiment script for any syntax errors, incorrect variable names, or other coding issues that may be causing the crash.\n5. Try running your experiment script with a different backend or on a different computer to see if the crash is specific to a particular setup.", "url": "https://forum.cogsci.nl", "title": "How to diagnose and fix crash issues in OpenSesame"}
{"content": "To optimize audio playback in OpenSesame:\n\n1. Ensure that your audio files are in a compatible format (e.g., .wav or .ogg) and have appropriate sample rates and bit depths.\n2. Use the \"sampler\" item in OpenSesame to play audio files.\n3. Adjust the \"duration\", \"fade_in\", and other properties of the sampler item to fine-tune the audio playback timing and onset.\n5. Test your experiment script on different computers and audio setups to ensure consistent playback across various environments.", "url": "https://forum.cogsci.nl", "title": "How to optimize audio playback in OpenSesame"}
{"content": "To randomly select an image from a predefined list in an inline_script:\n\n1. In an INLINE_SCRIPT item, create a list of image file names, e.g., `image_list = [\"image1.png\", \"image2.png\", \"image3.png\"]`\n2. Use `random.choice(image_list)` to randomly select an image file name from the list\n3. Store the randomly selected image file name in an experimental variable, e.g., `chosen_image = random.choice(image_list)`\n4. In a SKETCHPAD item, draw a dummy image (which can be anything)\n4. Edit the script of the SKETCHPAD and use the `chosen_image` variable for the `file` keyword:\n    ```\n    draw image center=1 file=\"{chosen_image}\" scale=1 show_if=True x=0 y=0 z_index=0\n    ```", "url": "https://forum.cogsci.nl", "title": "How to randomly select an image from a list in an inline_script an show it in a SKETCHPAD"}
{"content": "To properly display accented characters in OpenSesame:\n\n1. If you are reading text from a text file, such as the source file for a LOOP item, ensure that the file (e.g., CSV) is saved with UTF-8 encoding.\n2. When displaying the text, use a font that supports the required character set. The default Sans font in OpenSesame supports most accented characters.\n3. Run the experiment and verify that the accented characters are displayed correctly.", "url": "https://forum.cogsci.nl", "title": "How to properly display accented characters in OpenSesame"}
{"content": "To use HTML formatting to display special characters in OpenSesame:\n\n1. Convert the accented characters in your text to their HTML entity equivalents. For example, '\u00e9' becomes `&eacute;`, '\u00e2' becomes `&acirc;`, '\u00e7' becomes `&ccedil;`, etc.\n2. When displaying the text, enable HTML formatting by setting the `html` parameter to `yes`. For example, in a SKETCHPAD item: `draw textline 0 0 \"Expos&eacute;\" html=yes`.\n3. Run the experiment and verify that the special characters are displayed correctly using the HTML formatting.", "url": "https://forum.cogsci.nl", "title": "How to use HTML formatting to display special characters in OpenSesame"}
{"content": "To create two blocks of questions and randomize the order within each block in OpenSesame:\n\n1. Create a LOOP item for each block of questions (e.g., \"block1_loop\" and \"block2_loop\").\n2. Within the table of each LOOP item, add a column called `question`. \n3. Add all questions to the `question` column.\n4. In the LOOP item's properties, set the \"Order\" field to \"random\" to randomize the order of questions within the block.\n5. Inside the loop, create a trial sequence that presents the question to the participant, for example using a `form_text_input` item.\n5. Create a SEQUENCE item to contain the two LOOP items.\n6. Add the LOOP items to the SEQUENCE in the desired order of the blocks.", "url": "https://forum.cogsci.nl", "title": "How to create two blocks of questions and randomize the order within each block in OpenSesame"}
{"content": "If your trial corresponds to an item called trial_sequence, the start time of a trial is available as the variable `time_trial_sequence`.\n\nIf the start of a trial corresponds to another event, you need to manually register it as follows:\n\n1. Create an `inline_script` item at the beginning of your trial sequence.\n2. In the `inline_script`, use the `clock.time()` function to get the current time in seconds (e.g., `start_time = clock.time()`).\n3. Use the stored start time variable in subsequent items or calculations as needed.", "url": "https://forum.cogsci.nl", "title": "How to record the start time of a trial in OpenSesame"}
{"content": "To measure response times for each option in a custom FORM_BASE item:\n\n1. FORM_BASE items don't automatically record a response time, so you need to manually track it.\n2. Insert a FORM_BASE item into your experiment. Let's assume it's called `my_form`.\n3. Insert an INLINE_SCRIPT item after the my_form.\n4. In the run phase of the INLINE_SCRIPT, calculate the response time by subtracting the onset time of `my_form` from the current time, like so:\n    ```python\n    response_time = clock.time() - time_my_form\n    ```", "url": "https://forum.cogsci.nl", "title": "How to measure response times in a custom FORM_BASE item"}
{"content": "By default, the LOGGER only logs simple data types (`int`, `float`, `str`, `bytes`, `None`). This is to avoid the log file from being polluted by complex data types, which are often not intended for logging. However, in some cases you may want to also log complex data types. You can do this by explicitly entering the name of the to-be-logged variable in the Include field of the LOGGER item. Always check that your variables are logged correctly!", "url": "https://forum.cogsci.nl", "title": "How to log complex data types in OpenSesame"}
{"content": "To set the color of a Rectangle element on a Canvas:\n\n1. In an inline_script item, create a Canvas object using `my_canvas = Canvas()`.\n2. Add a Rectangle element to the Canvas using `my_canvas['rect'] = Rect(x, y, w, h)`, specifying the position and size.\n3. Set the color property of the Rectangle element directly in the constructor: `my_canvas['rect'] = Rect(x, y, w, h, color='red')`.\n4. If needed, modify the color after the Rectangle element has been created using the `color` attribute: `my_canvas['rect'].color = 'blue'`.\n5. Call `my_canvas.show()` to display the Canvas with the colored Rectangle.", "url": "https://forum.cogsci.nl", "title": "How to set the color of a Rectangle element on a Canvas"}
{"content": "To modify properties of Canvas elements after creation:\n\n1. Create a Canvas object and add elements to it, assigning them unique names.\n2. Access the desired element using its name, like `my_canvas['element_name']`.\n3. Modify the element's properties using dot notation, e.g., `my_canvas['circle'].radius = 50`.\n4. Update other properties such as position, color, or visibility in a similar manner.\n5. Redraw the Canvas using `my_canvas.show()` to reflect the changes.", "url": "https://forum.cogsci.nl", "title": "How to modify properties of Canvas elements after creation"}
{"content": "To animate Canvas elements using Python inline_script:\n\n1. Create a Canvas object and add the elements you want to animate.\n2. Use a `for` loop to update the properties of the elements incrementally.\n3. Call `my_canvas.show()` within the loop to redraw the Canvas after each update.\n4. Use `clock.sleep()` to introduce a small delay between each frame of the animation.\n5. Adjust the loop range and property changes to control the duration and behavior of the animation.", "url": "https://forum.cogsci.nl", "title": "How to animate Canvas elements using Python inline_script"}
{"content": "To create complex shapes and patterns on a Canvas:\n\n1. Break down the desired shape or pattern into simpler components, such as lines, circles, or polygons.\n2. Create individual elements for each component using the appropriate Canvas element types (Line, Polygon, etc.).\n3. Position and style the elements to form the desired shape or pattern.\n4. Use loops and mathematical functions to generate repetitive or symmetrical patterns programmatically.\n5. Combine multiple Canvas elements to build more intricate designs or illustrations.", "url": "https://forum.cogsci.nl", "title": "How to create complex shapes and patterns on a Canvas"}
{"content": "To navigate the overview area efficiently in a large experiment:\n\n1. Use the scroll wheel on your mouse to quickly scroll through the items in the overview area.\n2. Click and hold the scroll bar's thumb (the draggable part of the scroll bar) to quickly jump to a specific section of the overview area.\n3. Use the arrow keys on your keyboard to move the selection up or down one item at a time in the overview area.\n4. Press the \"Home\" key to jump to the top of the overview area, and press the \"End\" key to jump to the bottom.\n5. Collapse items that you are not currently working on by clicking the expand/collapse symbol next to the item name. This will reduce the amount of scrolling needed.", "url": "https://forum.cogsci.nl", "title": "How to navigate the overview area efficiently in a large experiment"}
{"content": "To optimize OpenSesame's performance for large experiments:\n\n1. Break your experiment into smaller, more manageable parts by using linked copies of items and sequences.\n2. Use keyboard shortcuts to quickly navigate and edit items in your experiment (e.g., \"Ctrl+C\" to copy, \"Ctrl+V\" to paste, \"Ctrl+S\" to save).", "url": "https://forum.cogsci.nl", "title": "How to optimize OpenSesame's usability for large experiments"}
{"content": "To use the search function to find specific items in a large experiment:\n\n1. Press \"Ctrl+Space\" to open the item quick switcher.\n2. Type the name or part of the name of the item you are looking for in the search bar.\n3. Press \"Enter\" or click the search button to highlight the first occurrence of the search term in the overview area.", "url": "https://forum.cogsci.nl", "title": "How to use the search function to find specific items in a large experiment"}
{"content": "To use the item toolbar to quickly add items to your experiment:\n\n1. Locate the item toolbar. It is typically on the right side of the OpenSesame window, although the position can be changed.\n2. Click and drag the desired item, such as a `keyboard_response` or `sketchpad`, from the item toolbar to the appropriate location in the overview area.\n3. Release the mouse button to add the item to your experiment.\n4. The properties of the new item will be automatically opened.", "url": "https://forum.cogsci.nl", "title": "How to use the item toolbar to quickly add items to your experiment"}
{"content": "To use the undo and redo functions to revert changes in your experiment:\n\n1. Make changes to your experiment, such as moving or editing items.\n2. Press \"Alt+Ctrl+Z\" or click the \"Undo\" button in the main toolbar to revert the last change you made.\n3. Press \"Alt+Ctrl+Z\" multiple times to undo additional changes in the reverse order that you made them.\n4. Press \"Alt+Ctrl+Shift+Z\" or click the \"Redo\" button in the main toolbar to reapply a change that you previously undid.\n5. Press \"Alt+Ctrl+Shift+Z\" multiple times to redo additional changes in the order that you originally made them.", "url": "https://forum.cogsci.nl", "title": "How to use the undo and redo functions to revert changes in your experiment"}
{"content": "To make the mouse cursor visible or invisible in OSWeb:\n\n1. Insert an inline_javascript at the location where you want to make the mouse cursor visible.\n2. In the run phase of this inline_javascript item, use the following script to change the visibility of the mouse cursor\n   ```javascript\n   // To make the cursor visible\n   runner._renderer.view.style.cursor = 'default'\n   // To hide the cursor\n   runner._renderer.view.style.cursor = 'none'\n   ```\n   \nImportant note: this script directly accesses the OSWeb internals, which may break in future versions of OSWeb.", "url": "https://forum.cogsci.nl", "title": "How to show or hid the mouse cursor in OSWeb"}
{"content": "To create a custom mouse-tracking task using JavaScript in OSWeb:\n\n1. Create a new inline_javascript item in your experiment.\n2. In the prepare phase of the inline_javascript item, set up the necessary variables and functions for your mouse-tracking task. For example:\n   ```javascript\n   var startTime;\n   var mousePositions = [];\n   \n   function recordMousePosition(e) {\n     var currentTime = new Date().getTime();\n     var elapsedTime = currentTime - startTime;\n     mousePositions.push({x: e.clientX, y: e.clientY, time: elapsedTime});\n   }\n   ```\n3. In the run phase of the inline_javascript item, attach the `recordMousePosition` function to the `mousemove` event listener:\n   ```javascript\n   document.addEventListener('mousemove', recordMousePosition);\n   startTime = new Date().getTime();\n   ```\n4. Present your stimuli and perform any necessary task-specific logic in the run phase.\n5. When the task is complete, in the run phase of another inline_javascript item, remove the event listener and save the recorded mouse positions by assigning it as a string to a global variable (`mouse_positions`), which will be logged by the LOGGER item.\n   ```javascript\n   document.removeEventListener('mousemove', recordMousePosition);\n   mouse_positions = JSON.stringify(mousePositions);\n   ```\n6. Save the changes to the experiment script.\n7. Run the experiment to test the custom mouse-tracking task.", "url": "https://forum.cogsci.nl", "title": "How to create a custom mouse-tracking task in OSWeb"}
{"content": "To display the mouse coordinates in real-time using JavaScript in OSWeb:\n\n1. Create a new inline_javascript item in your experiment.\n2. In the prepare phase of the inline_javascript item, create a text element to display the mouse coordinates:\n   ```javascript\n   var coordinatesDisplay = document.createElement('div');\n   coordinatesDisplay.style.position = 'absolute';\n   coordinatesDisplay.style.top = '10px';\n   coordinatesDisplay.style.left = '10px';\n   coordinatesDisplay.style.fontSize = '16px';\n   document.body.appendChild(coordinatesDisplay);\n   ```\n3. In the same script, attach a function to the `mousemove` event listener to update the coordinates display:\n   ```javascript\n   document.addEventListener('mousemove', function(e) {\n     coordinatesDisplay.innerHTML = 'X: ' + e.clientX + ', Y: ' + e.clientY;\n   });\n   ```\n4. Optionally, you can customize the appearance of the coordinates display by modifying the CSS styles in the prepare phase.\n5. Save the changes to the experiment script.\n6. The mouse coordinates are now shown continuously in the top left of the browser window.", "url": "https://forum.cogsci.nl", "title": "How to display the mouse coordinates in real-time in OSWeb"}
{"content": "To set up a Tobii eye tracker in OpenSesame:\n\n1. Install the necessary Tobii drivers and software on your computer.\n2. Install the `tobii-research` Python library. This library may require a specific version of Python, which may be different from the version of Python that OpenSesame uses. If that is the case, you will need to build a custom Python environment, for example using Anaconda. Consult the OpenSesame documentation for instructions.\n3. In OpenSesame, add a PYGAZE_INIT item to the start of your experiment.\n4. In the PYGAZE_INIT item properties, select \"Tobii\" as the eye tracker type.\n5. Configure the Tobii settings according to your preferences and hardware setup.\n6. Add a PYGAZE_START_RECORDING item before the trial sequence to start recording eye tracking data.\n7. Add a PYGAZE_LOG item at the end of the trial sequence to log experimental variables to the log file.\n8. Add a PYGAZE_STOP_RECORDING item after the trial sequence to stop recording eye tracking data.\n9. You can also use the 'Eye tracking template', which already contains the basic structure of an eye-tracking experiment.", "url": "https://forum.cogsci.nl", "title": "How to set up a Tobii eye tracker in OpenSesame"}
{"content": "To log eye-tracking data in OpenSesame:\n\n1. Set up your eye tracker using the PYGAZE_INIT item.\n2. Add a PYGAZE_LOG item at the points in your experiment where you want to log eye tracking data.\n3. It is often useful to log the start of epochs or phases during the trial, for example by logging the text 'start_phase cue' immediately after the presentation of a cue stimulus.\n4. It is also important to log experimental variables to the eye-tracking data. You can do this by specifying individual variables to log in PYGAZE_LOG on separate lines (for example `var cue {cue}`). You can also enabled the 'Automatically log all variables' option.\n5. Alternatively, you can use the `eyetracker.log()` function in INLINE_SCRIPT items to log text to the eye-tracking log file.\n6. OpenSesame will now log all relevant information to the eye-tracking log file.", "url": "https://forum.cogsci.nl", "title": "How to log eye tracking data in OpenSesame"}
{"content": "There is no standard format for eye-tracking data, and no standard way to analyze eye-tracking data. Therefore, it is important to think about how you intend to analyze the data already during the design of the experiment, because the analysis pipeline determines which information needs to be written to the eye-tracking log file.\n\nFor example, if you intend to use the Python `eyelinkparser` library, you need to send messages that follow the conventions of the `eyelinkparser`, which you can find in the documentation of that package.\n\nSimilarly, if you intend to use the SR Research DataViewer application, you need to send messages that follow the conventions of the DataViewer.", "url": "https://forum.cogsci.nl", "title": "How to analyze eye-tracking data that was collected with OpenSesame"}
{"content": "To draw a circle using PsychoPy:\n\n1. In the experiment properties of OpenSesame, under 'Run experiment', select 'On the desktop with PsychoPy (psycho)'.\n2. Insert an inline_script into your experiment. The code below should go in this inline_script.\n3. Import the necessary modules (e.g., `from psychopy import visual`).\n4. In OpenSesame, the window object is available as the global `win` variable. Therefore, you don't need to explicitly create a window object.\n5. Create a `Circle` object using `visual.Circle()`, specifying the `win` object as the first argument. Note that this is a different object from the built-in OpenSesame `Circle` object.\n6. Set the `size` parameter of the `Circle` object to the desired diameter in pixels (e.g., `circle.size = (100, 100)` for a circle with a diameter of 100 pixels).\n7. Optionally, set other parameters such as `pos`, `fillColor`, and `lineColor` to customize the appearance and position of the circle.\n8. Use the `draw()` method of the `Circle` object to draw the circle on the window (e.g., `circle.draw()`).\n9. Update the window to display the circle (e.g., `win.flip()`).\n\nExample:\n\n```python\nfrom psychopy import visual\n\ncircle = visual.Circle(win)\ncircle.size = (100, 100)\ncircle.fillColor = 'red'\ncircle.draw()\nwin.flip()\n```", "url": "https://forum.cogsci.nl", "title": "How to draw a circle using PsychoPy"}
{"content": "There are two ways to abort an OpenSesame experiment while it is running. To gently abort the experiment:\n\n1. Press the `Escape` key to pause the experiment. A confirmation prompt will appear.\n2. Press the `q` key to confirm quitting the experiment. \n3. The experiment process will cleanly exit and you will return to the OpenSesame window.\n\nTo kill the experiment process, for example when it is unresponsive:\n\n1. Switch to the OpenSesame window.\n2. Click on the icon marked 'Forcibly kill the experiment' in the main toolbar.\n3. The experiment process will now be killed.", "url": "https://forum.cogsci.nl", "title": "How to abort an OpenSesame experiment"}
{"content": "To create a basic experiment structure in OpenSesame:\n\n1. Create a new experiment and add a loop item to the main sequence, which is generally called 'experiment'.\n2. Rename the new loop item to 'block_loop' to indicate that it corresponds to a block of trials.\n3. Add a sequence item as the item to run for the block_loop.\n4. Rename the new sequence to 'trial_sequence' to indicate that it corresponds to a single trial.\n2. Within the trial sequence item, add sketchpad items for each visual stimulus display of your trial (e.g., baseline, fixation, emotion induction, instruction, emotion regulation, black screen, relax, and rating).\n3. Adjust the duration of each sketchpad item according to your experimental design.\n4. Add a keyboard_response item after the display that participants should respond to.", "url": "https://forum.cogsci.nl", "title": "How to create a basic experiment structure in OpenSesame"}
{"content": "To present images randomly in OpenSesame:\n\n1. Create a loop item and add a list of image file names as rows to a column of the loop table called 'image_file'\n2. In the loop item's properties, set the \"Order\" to \"random\".\n3. Create a sketchpad item within the loop and add an image element to it.\n4. Add the script of the image element, and set the \"file\" keywowrd to \"{image_file}\": `file=\"{image_file}\"'. The curly braces indicate that image_file is a Python expression that refers to the variable `image_file`.\n5. Each iteration of the loop will now display a randomly selected image from your list.", "url": "https://forum.cogsci.nl", "title": "How to present images randomly in OpenSesame"}
{"content": "To implement different instructions based on trial conditions:\n\n1. Decide whether you want to vary the instruction from trial to trial, in which case the instructions below relate to the block_loop and the trial_sequence (assuming that you named your items following the standard OpenSesame naming conventions); or from block to block, in which case the instructions below relate to the experimental_loop and block_sequence.\n1. In your loop table, create a column called `instruction_text` that contains the text that should be presented as instruction to the participant (e.g., \"maintain\" or \"decrease\").\n2. Add a sketchpad item for the instruction screen to the start of the sequence.\n3. Add a text element to the instruction sketchpad to show the text \"{instruction_text}\".\n4. The curly braces indicate that instruction_text is a Python expression that refers to the variable `instruction_text`.\n5. OpenSesame will now display the appropriate instruction for each trial or each block based on the value in the loop table.", "url": "https://forum.cogsci.nl", "title": "How to implement different instructions based on trial conditions"}
{"content": "OpenSesame does not contain a rating scale by default, but it is easy to implement one.\n\nHow to create a rating scale using a form_multiple_choice item:\n\n1. Add a form_multiple_coice item to your experiment.\n2. Make sure that 'Allow multiple options to be selected' is disabled.\n3. Add each rating option as a separate line in the options field at the bottom of the controls.\n\nHow to create a rating scale using a sketchpad item:\n\n1. Design the rating scale using one sketchpad element, called 'rating_sketchpad', for each clickable option. For example, you could use five filled circles or five images of a star to create five-point likert scale.\n2. Give each clickable element a unique name, such as 'rating1', 'rating2', etc.\n3. After rating_sketchpad, insert a mouse_response.\n4. In the mouse_response, select rating_sketchpad as 'Linked sketchpad'.\n5. The clicked option will now be available through the `cursor_roi` variable.\n6. To let the experiment continue only when participants have clicked on an option (and not the background, for example), put the mouse_response in a loop that breaks only when an option was clicked, for example with a break-if expression: `'cursor_roi.startswith('rating')`.", "url": "https://forum.cogsci.nl", "title": "How to create a rating scale in OpenSesame"}
{"content": "You cannot change the size of a Canvas in OpenSesame, because a Canvas always covers the entire window, the size of which is determined by the resolution of the experiment. However, you can change the resolution of the experiment as follows:\n\n1. Open the Experiment Properties by clicking on the top-level element of the overview area.\n2. Change the resolution (width and height) to the desired dimension.\n3. The resolution will available as the `width` and `height` variables.\n\nImportant note: when running the experiment full-screen, the resolution of the experiment means something different depending on the selected backend:\n\n- When you have selected 'On the desktop with PsychoPy (psycho)' or 'On the desktop with Expyriment (xpyriment)', the resolution of the display is not actually changed, so it's recommended to change the experiment resolution to match the display resolution.\n- When you have selected 'On the desktop with legacy (psycho)', the resolution of the display is changed tp the experiment resolution.\n- When you have selected 'In a browser with OSWeb', the resolution determines the size of the experiment canvas that is shown in the browser window. You can experiment with different values to find out which resolution works best.", "url": "https://forum.cogsci.nl", "title": "How to set the size of a Canvas in OpenSesame"}
{"content": "To position elements on a Canvas using pixel coordinates in OpenSesame:\n\n1. Create a Python INLINE_SCRIPT.\n2. In the INLINE_SCRIPT, create a Canvas object.\n3. Add the desired elements (e.g., Rectangle, Circle, Image, etc.) and specify their positions using the `x` and `y` parameters. For example:\n   ```python\n   my_canvas = Canvas()\n   my_canvas['rect'] = Rect(x=100, y=200, w=50, h=50)\n   my_canvas['circle'] = Circle(x=300, y=400, r=30)\n   my_canvas.show()\n   ```\n4. The `x` and `y` values represent the pixel coordinates relative to the center of the Canvas. Positive `x` values move the element to the right, while positive `y` values move it downward.\n5. Adjust the `x` and `y` values to position the elements at the desired locations on the Canvas.\n6. Run the experiment to verify that the elements are positioned correctly.", "url": "https://forum.cogsci.nl", "title": "How to position elements on a Canvas using pixel coordinates"}
{"content": "To display an image on a Canvas in OpenSesame:\n\n1. Create a Python INLINE_SCRIPT.\n2. In the INLINE_SCRIPT, create a Canvas object.\n2. Add an `Image` element to load and display the image. For example:\n   ```python\n   my_canvas = Canvas()\n   my_canvas['image'] = Image(pool['image.png'], x=0, y=0)\n   my_canvas.show()\n   ```\n   Replace `'image.png'` with the actual name of your image file, which should be placed in the file pool.\n3. Use the `x` and `y` parameters to specify the position of the image on the Canvas. The default values of `x=0` and `y=0` will center the image on the Canvas.\n4. If needed, you can adjust the size of the image using the `scale` parameter. For example:\n   ```python\n   my_canvas['image'] = Image(pool['image.png'], x=0, y=0,scale=0.5)\n   ```\n   A `scale` value of 1.0 represents the original size of the image, while values less than 1.0 will shrink the image and values greater than 1.0 will enlarge it.\n5. Run the experiment to verify that the image is displayed correctly on the Canvas.", "url": "https://forum.cogsci.nl", "title": "How to display an image on a Canvas"}
{"content": "To set up a GazePoint eye tracker in OpenSesame:\n\n1. Install the necessary GazePoint drivers and software on your computer.\n2. In OpenSesame, add a PYGAZE_INIT item to the start of your experiment.\n3. In the PYGAZE_INIT item properties, select \"OpenGaze\" as the eye tracker type.\n4. Configure the OpenGaze settings according to your preferences and hardware setup.\n5. Add a PYGAZE_START_RECORDING item before the trial sequence to start recording eye tracking data.\n6. Add a PYGAZE_LOG item at the end of the trial sequence to log experimental variables to the log file.\n7. Add a PYGAZE_STOP_RECORDING item after the trial sequence to stop recording eye tracking data.\n8. You can also use the 'Eye tracking template', which already contains the basic structure of an eye-tracking experiment.", "url": "https://forum.cogsci.nl", "title": "How to set up a GazePoint eye tracker in OpenSesame"}
{"content": "To display multiple images and play audio simultaneously in OpenSesame:\n\n1. Create a sketchpad item and add image elements for each of the four pictures you want to display.\n2. Adjust the position and size of the image elements to arrange them on the screen as desired.\n3. Create a sampler item and specify the audio file you want to play.\n4. If you want the sketchpad to be shown when the sampler starts playing and to remain visible until the sampler is done playing, insert the sketchpad and set the duration of the sketchpad to 0, and have this followed by the sampler and set the duration of the sampler to 'sound'.", "url": "https://forum.cogsci.nl", "title": "How to display multiple images and play audio simultaneously in OpenSesame"}
{"content": "To define time windows (or: epochs, or: phases) for eye tracking analysis in OpenSesame:\n\n1. After each event that corresponds to the start of a time window, send a message to the eye-tracking log file.\n2. You can log messages using the PYGAZE_LOG item or in an INLINE_SCRIPT item using the `eyetracker.log()` function.\n3. Make sure that the log messages match the assumption of the analysis pipeline that you intend to use. For example, if you want to use the `eyelinkparser`, indicate the start of each phase using a 'start_phase cue' message, where cue stands for the name of the phase.", "url": "https://forum.cogsci.nl", "title": "How to define time windows (or: epochs, or: phases) for eye tracking analysis in OpenSesame"}
{"content": "OpenSesame includes an automatic updater, which starts in the background when you launch the program. It is recommended to update packages through the automatic updater. However, if you wish, you can also manually update packages as follows:\n\n1. Open the console in OpenSesame (View -> Show console).\n2. `pip` is the command to execute the standard Python packaging tool, and is always available.\n3. You can update packages using `pip` using the following command: `pip install package_name --upgrade`\n4. `conda` is the command to execute the Anaconda packaging tool, and is available if you are using the standard Windows or Mac OS packages, or if you have installed OpenSesame in a custom anaconda environment.\n5. You can update packages using `pip` using the following command: `conda update package_name`\n6. In some cases, you have to prefix the `conda` and `pip` commands with a `!` to run them in the OpenSesame console: `!conda` or `!pip`\n7. Restart OpenSesame for the updates to take effect.", "url": "https://forum.cogsci.nl", "title": "How to manually update OpenSesame packages"}
{"content": "To report bugs or issues with OpenSesame:\n\n1. Go to the OpenSesame forum at https://forum.cogsci.nl/.\n2. Check if the issue has already been reported by searching the forum for relevant keywords.\n3. If the issue has not been reported, create a new discussion.\n4. Provide a clear and descriptive title for your topic.\n5. In the topic description, include details about the issue, such as the version of OpenSesame, your operating system, and any error messages.\n6. If possible, attach any relevant files, such as screenshots or log files, to help the developers understand and reproduce the issue.\n7. Submit the topic and wait for a response from the OpenSesame community or developers.", "url": "https://forum.cogsci.nl", "title": "How to report bugs or issues with OpenSesame"}
{"content": "To set a time limit for a form in OpenSesame:\n\n1. Add a `form_base` item to your experiment.\n2. In the form's script, add a line that specifies the timeout in milliseconds, e.g. `set timeout 3000`\n3. The form will now automatically end after the specified time limit or when the participant submits their response.", "url": "https://forum.cogsci.nl", "title": "How to set a time limit for a form in OpenSesame"}
{"content": "Unlike KEYBOARD_RESPONSE items and other response items, forms do not automatically code whether a response was correct or not. Therefore, to accomplish this, you need to perform the following steps:\n\n1. Create a loop table with a column for the correct answers (e.g., `correct_response`).\n2. In each row of the loop table, enter the correct answer for the corresponding trial.\n3. Add a `form_base` item to your experiment and place it inside the loop.\n4. In the form's controls, add an input widget (e.g., `text_input`) for the participant's response.\n5. Set the input widget's `var` property to a unique value (e.g., `'participant_response'`).\n6. After the form is submitted, compare the participant's response (`participant_response`) with the correct answer for the current trial (`correct_answer`) using an `if` statement in the run phase of an INLINE_SCRIPT item that follows the form:\n    ```python\n    if participant_response == correct_response:\n        correct = 1\n    else:\n        correct = 0\n    ```", "url": "https://forum.cogsci.nl", "title": "How to determine whether responses in a form are correct"}
{"content": "When an experiment fails to open correctly in OpenSesame, you can take the following steps to troubleshoot the issue:\n\n1. Check that you are using the most recent version of OpenSesame. If you are using an outdated version, the experiment may not be compatible.\n2. If you are using a recent version of OpenSesame, close OpenSesame completely and then re-open the experiment.\n3. Check the debug window (View \u2192 Show console) for error messages that may indicate why the experiment is failing to open.\n5. If you still cannot get the experiment to open correctly, try downloading the experiment again. The downloaded file may have been corrupted.\n6. If problems persist, contact the original author of the experiment for further assistance.", "url": "https://forum.cogsci.nl", "title": "How to troubleshoot an experiment that fails to open correctly"}
{"content": "If you need help with OpenSesame, there are several places you can look:\n\n1. Consult the built-in help documentation by clicking the help buttons that appear throughout the interface, or by clicking Help in the main menu. This will open the documentation in your web browser.\n2. Visit the documentation website at [osdoc.cogsci.nl](https://osdoc.cogsci.nl). This site contains an extensive manual as well as several step-by-step tutorials.\n3. Watch video tutorials on the [YouTube channel](https://www.youtube.com/sebastiaanmathot). These videos cover many basic topics to help you get started with OpenSesame.\n4. Ask a question on the [OpenSesame forum](https://forum.cogsci.nl). This forum is the main place for getting personalized help with OpenSesame. Be sure to include enough details, such as a description of what you are trying to achieve, and screenshots of things that you need help with.\n5. Ask me! As an AI assistant with access to the OpenSesame documentation, I will be able to help you with many things.", "url": "https://forum.cogsci.nl", "title": "How to find help when working with OpenSesame"}
{"content": "To share an experiment with others, so that they can run and/ or inspect the experiment themselves, you can take the following steps:\n\n1. In OpenSesame, open the experiment that you would like to share.\n2. Make sure that the experiment contains no sensitive information, such as participant data.\n3. Save the experiment and close it.\n4. Locate the experiment file (`.osexp`) on your computer.\n5. Upload this file to a file sharing service, such as Google Drive, Dropbox, or the Open Science Framework (OSF).\n6. Once the upload is complete, make sure that the file is shared with the intended recipients.\n7. Send the download link to the people with whom you want to share the experiment.\n8. The recipients can then download the experiment and open it in their own copy of OpenSesame.", "url": "https://forum.cogsci.nl", "title": "How to share an experiment with others"}
{"content": "To import (open) an experiment into OpenSesame, for example an experiment that someone else has shared with you, take the following steps:\n\n1. Download the experiment file, which should have the `.osexp` extension, to your computer.\n2. Launch OpenSesame.\n3. In the menu, click on File \u2192 Open and browse to the location where you have downloaded the `.osexp` file.\n4. Select the `.osexp` file and click on 'Open'.\n5. The downloaded experiment will now open in OpenSesame.", "url": "https://forum.cogsci.nl", "title": "How to import (open) an experiment into OpenSesame"}
{"content": "To get the coordinates of the last character in a Text element:\n\n1. Create a Text element on your canvas with the desired sentence except for the last character. So if you want the coordinates of the 'i' in 'sigmundai', you would use the string 'sigmunda'.\n2. Use the `boundingbox` property of the Text element to get the bounding box of the entire text string. The bounding box is a tuple of four values: (left, top, right, bottom).\n3. The x-coordinate of the last character (i.e. the 'i' in this example) will be approximately equal to the `right` value of the bounding box.\n4. To get the y-coordinate of the last character, you can use the `top` or `bottom` value of the bounding box, depending on whether you want the coordinate of the top or bottom of the character.\n5. If needed, you can adjust the x-coordinate by subtracting a small value to account for any padding on the right side of the text.\n\n```python\nmy_text = 'sigmundai'\nmy_canvas = Canvas()\nmy_canvas['sentence'] = Text(my_text[:-1])\nbbox = my_canvas['sentence'].rect  # important: not bounding_box\nlast_char_x = bbox[2]  # right coordinate of the bounding box\nlast_char_y = bbox[1]  # top coordinate of the bounding box\n```", "url": "https://forum.cogsci.nl", "title": "How to get the coordinates of the last character in a Text element"}
{"content": "To calculate the width of a Text element:\n\n1. Create a Canvas object.\n3. Calculate the width of a text (without rendering it) using the `text_size()` function.\n\n```python\nmy_text = 'sigmundai'\nmy_canvas = Canvas()\nwidth, height = my_canvas.text_size(my_text)\n```", "url": "https://forum.cogsci.nl", "title": "How to calculate the width of a Text element"}
{"content": "To adjust the position of a Text element based on its length:\n\n1. Create a Text element on your canvas with the desired sentence.\n2. Use the `boundingbox` property of the Text element to get the bounding box of the entire text string.\n3. Calculate the width of the Text element by subtracting the `left` value from the `right` value of the bounding box.\n4. Set the `x` property of the Text element to the negative half of the text width to center the text horizontally on the canvas.\n5. If needed, you can also adjust the `y` property of the Text element to vertically position the text as desired.\n\n```python\nmy_text = 'sigmundai'\nmy_canvas = Canvas()\nmy_canvas['sentence'] = Text(my_text[:-1], center=False)\nbbox = my_canvas['sentence'].rect  # important: not bounding_box\ntext_width = bbox[2] - bbox[0]  # right - left\nmy_canvas['sentence'].x = -text_width # move the text left so that it runs until the center of the screen\nmy_canvas['sentence'].y = 0  # set the vertical position as needed\n```", "url": "https://forum.cogsci.nl", "title": "How to adjust the position of a Text element based on its length"}
{"content": "Classes in OpenSesame inline_script work the same way as classes in regular Python. To define a class in an inline_script:\n\n1. Add an `inline_script` item to your experiment.\n2. In the `inline_script`, define your class using the `class` keyword followed by the class name (e.g., `class MyClass:`).\n3. Inside the class definition, create an `__init__` method to initialize the class's attributes (e.g., `def __init__(self, attribute1, attribute2):`).\n4. Define any additional methods within the class that perform specific actions or calculations.\n5. Outside the class definition, create an instance of the class by calling the class name and passing any required arguments (e.g., `my_instance = MyClass(arg1, arg2)`).\n6. Use the instance to access the class's attributes and methods (e.g., `my_instance.attribute1`, `my_instance.method()`).\n7. Defining classes in inline_scripts can help organize and modularize your code, making it easier to maintain and reuse.", "url": "https://forum.cogsci.nl", "title": "How to define and use a class in an OpenSesame inline_script"}
{"content": "To use a response collected in a KEYBOARD_RESPONSE item in a run-if expression to select which item is run:\n\n1. In a SEQUENCE item, set the run-if expression of one child item to `response == 'left'` to execute it only if the left arrow was pressed.  \n2. Set the run-if statement of another child item to `response == 'right'` to execute it only if the right arrow was pressed.\n3. Run-if expressions should be valid Python expressions.", "url": "https://forum.cogsci.nl", "title": "How to use a response in a run-if expression"}
{"content": "To use JavaScript code in an experiment running in OSWeb:\n\n1. Insert an INLINE_JAVASCRIPT item into your experiment\n2. For code that needs to be executed during preparation (for example the preparation of a trial in the case of a trial SEQUENCE), use the 'Prepare' phase\n3. For code that needs to be executed during executing, use the 'Run' phase\n4. Avoid naming conflicts with variables defined in the other parts of the experiment\n5. Global variables from INLINE_JAVASCRIPT items are also available in the user interface, for example in run-if expressions\n6. Variables from the user interface, for example response variables, are available as global variables in INLINE_JAVASCRIPT items", "url": "https://forum.cogsci.nl", "title": "How to use JavaScript code in an OSWeb experiment"}
{"content": "To create a recall trial where an image is shown and the participant types in a response in OSWeb, you can use an INLINE_HTML item with the following code:\n\n\n```html\n<input type='text' name='text_response'>\n<img id='my_image_element'>\n<input type='submit' value='ok'>\n\n<script>\n// Assume that the variable `my_image` defines the name of the image in the file pool\ndocument.getElementById('my_image_element').src = pool[my_image].data.src\n</script>\n```", "url": "https://forum.cogsci.nl", "title": "How to show a form with image and text input in OSWeb"}
{"content": "To run an experiment in a web browser using OSWeb, follow these steps:\n\n1. Open the Experiment Properties and select 'In a browser with OSWeb (osweb)' in the 'Run experiment' section.\n2. Click any of the 'Run' buttons to start the experiment.\n3. If the experiment is not compatible with OSWeb, an error message will appear that details the compatibility issues. \n4. If there are no compatibility issues, the experiment will open in a new browser window. Note that even though the experiment is running in a web browser, it is still executing locally on your own computer.\n5. When the experiment is finished, the data will be downloaded in `.json` format. This data file can then be converted to `.xlsx` or `.csv` format for further analysis.", "url": "https://forum.cogsci.nl", "title": "How to run an experiment in a web browser using OSWeb"}
{"content": "For more control over OSWeb experiments, you can access the OSWeb and JATOS control panel:\n\n1. Click on the Tools menu\n2. Select 'OSWeb and JATOS control panel'\n3. The OSWeb and JATOS control panel will appear, offering configuration options such as: \n   - Possible subject numbers when running in JATOS\n   - Enabling fullscreen mode \n   - Showing the OSWeb welcome screen\n   - Bypassing compatibility checks\n   - Customizing welcome text\n   - Specifying external JavaScript libraries to load", "url": "https://forum.cogsci.nl", "title": "How to access the OSWeb control panel"}
{"content": "To host an experiment online so that it can be run by participants, you need to publish it to JATOS:\n\n1. In OpenSesame, open your experiment and check that it is compatible with OSWeb \n2. In the OSWeb and JATOS control panel, configure your JATOS server (such as https://jatos.mindprobe.eu) and your API token, which you can generate by logging into your JATOS server in a web browser.\n3. In the OpenSesame menu, select 'Save and publish to JATOS' (or 'Save and publish to MindProbe' depending on which server you have configured).\n4. Your experiment will now be uploaded to your JATOS server.\n9. Once uploaded, you can generate links by logging into your JATOS server in a web browser to allow participants to run your experiment in a web browser\n\nAlternatively, you can export the experiment to a JATOS archive (jzip) using the OSWeb and JATOS control panel, and import this archive through the JATOS server.", "url": "https://forum.cogsci.nl", "title": "How to host an experiment online using JATOS / MindProbe"}
{"content": "2. In the OSWeb and JATOS control panel, configure your JATOS server (such as https://jatos.mindprobe.eu) and your API token, which you can generate by logging into your JATOS server in a web browser.\n3. In the OpenSesame menu, select 'Open from JATOS' (or 'Open from MindProbe' depending on which server you have configured).\n4. Select an experiment from the list that appears.\n5. The experiment will now be downloaded from your JATOS server.\n6. Once downloaded, the experiment will be opened in OpenSesame.\n\nAlternatively, you can export the experiment from the JATOS server, and import it as a JATOS archive (jzip) using the OSWeb and JATOS control panel.", "url": "https://forum.cogsci.nl", "title": "How to download an experiment from JATOS / MindProbe"}
{"content": "To set up response keys in OpenSesame:\n\n1. Create a keyboard_response item in your experiment.\n2. In the keyboard_response item properties, specify the allowed keys in the \"Allowed responses\" field (e.g., 'z;/').\n3. Set the timeout duration in the \"Timeout\" field to limit the response window (e.g., '2500' for 2500ms).\n4. Add the keyboard_response item to your trial sequence.\n5. Run your experiment and test if the response keys are working as expected.", "url": "https://forum.cogsci.nl", "title": "How to set up response keys in OpenSesame"}
{"content": "To debug response key issues in OpenSesame:\n\n1. Double-check that the response keys are correctly specified in the keyboard_response item properties.\n2. Ensure that the keys are not mapped to any other functions or shortcuts in your operating system or other software.\n3. Test your experiment with different response keys to isolate the issue.\n4. Print the values of response variables (e.g., 'response', 'response_time') to the debug window, or monitor them in the Variable explorer, to monitor their values during the experiment.\n5. Check the console for any error messages related to the keyboard_response item or response handling.", "url": "https://forum.cogsci.nl", "title": "How to debug response key issues in OpenSesame"}
{"content": "To use audio stimuli in OpenSesame:\n\n1. Import your audio files into the file pool.\n2. Create a sampler item in your experiment.\n3. In the sampler item properties, select the audio file from the file pool.\n4. Set the duration and other playback settings for the audio stimulus.\n5. If you want participants to press a key in response to the sound, add a keyboard_response item after the sampler item in the trial sequence.", "url": "https://forum.cogsci.nl", "title": "How to use audio stimuli in OpenSesame"}
{"content": "To troubleshoot timing issues in OpenSesame:\n\n1. Close any unnecessary background applications that may interfere with the timing of your experiment.\n2. Use a high-precision backend, such as 'psycho', for better timing accuracy.\n3. Record the actual timing of events and compare them with the expected timing. You can do this with the `clock.time()` function `inline_script` items or by relying on onset time variables that are automatically created by OpenSesame. For example, the onset time of a sketchpad called 'target' is stored as the variable 'time_target'.", "url": "https://forum.cogsci.nl", "title": "How to troubleshoot timing issues in OpenSesame"}
{"content": "To play a video file for a randomly selected duration in OpenSesame:\n\n1. In an INLINE_SCRIPT item, create a list of possible durations, e.g., `durations = [300, 350, 400, 450, 500]`\n2. Use `random.choice(durations)` to randomly select a duration from the list and store it in a variable, e.g., `video_duration = random.choice(durations)`\n3. In the MEDIA_PLAYER_MPY item, set the duration field to `{video_duration}`", "url": "https://forum.cogsci.nl", "title": "How to play a video file for a random duration in OpenSesame"}
{"content": "To optimize video playback performance in OpenSesame:\n\n1. Ensure that your video files are in a format that is well-supported by the video backend you are using (e.g., `.mp4` for the `mpy` backend)\n2. Compress your video files to reduce their file size while maintaining acceptable quality, using tools like FFmpeg or Handbrake\n3. Use a reasonable frame rate for your videos (e.g., 30 fps) to balance smoothness and performance\n4. If possible, use a smaller video resolution to reduce the processing load on the computer", "url": "https://forum.cogsci.nl", "title": "How to optimize video playback performance in OpenSesame"}
{"content": "To randomly select images and videos in OpenSesame:\n\n1. In an INLINE_SCRIPT item, create separate lists for your image and video files, e.g., `images = [\"image1.png\", \"image2.png\", \"image3.png\"]` and `videos = [\"video1.mp4\", \"video2.mp4\", \"video3.mp4\"]`\n2. Use `random.choice(images)` to randomly select an image file from the `images` list and store it in a variable, e.g., `selected_image = random.choice(images)`\n3. Similarly, use `random.choice(videos)` to randomly select a video file from the `videos` list and store it in a variable, e.g., `selected_video = random.choice(videos)`\n4. In a SKETCHPAD item, set the image source to the `{selected_image}` variable to display the randomly chosen image\n5. In the MEDIA_PLAYER_MPY item, set the video source to the `{selected_video}` variable to play the randomly chosen video", "url": "https://forum.cogsci.nl", "title": "How to randomly select images and videos in OpenSesame"}
{"content": "To update OpenSesame, take the following steps:\n\n1. Launch OpenSesame. An automatic updater will starting checking for updates in the background. This may take a few minutes.\n2. If no updates are available, nothing will happen.\n3. If updates are available, a green update button marked \"Install updates \u2026\" will appear in the main toolbar.\n3. Click the green update button to open the automatic updater.\n4. Within the automatic updater, review the script that indicates which packages will be updated. If necessary, modify the script.\n5. Click the 'Run update script' button to perform the updates. The updates will be executed in the OpenSesame console.\n6. Once the updates have been completed, restart OpenSesame.", "url": "https://forum.cogsci.nl", "title": "How to update packages in OpenSesame"}
{"content": "To create an animated Canvas with Python inline_script, you can dynamically update the properties of Canvas elements in between subsequent calls to `show()`. For example, to create an animation of a moving circle, you could use the following script:\n\n```python\nanimated_canvas = Canvas()\nanimated_canvas['circle'] = Circle(x=-100, y=0, r=10)\nfor x in range(-100, 101):\n    animated_canvas['circle'].x = x\n    animated_canvas.show()\n    clock.sleep(10)\n```", "url": "https://forum.cogsci.nl", "title": "How to create an animated Canvas with Python inline_script"}
{"content": "If a visual stimulus is shown at the end of a trial, it is not automatically removed when the trial ends. Rather, it stays on the screen until a new display is shown at the start of the next trial, which due to intertrial preparation time may take a while. As a result, if a trial ends with a KEYBOARD_RESPONSE, the experiment can seem not react to the key press. To avoid this, simply add a blank SKETCHPAD at the end of the trial. This will ensure that the trial ends with a blank display, and avoid the experiment from feeling sluggish or delayed to the participantl.", "url": "https://forum.cogsci.nl", "title": "How to avoid the last display of a trial from being shown for too long"}
{"content": "If you want to register key pressed continuously, while at the same presenting a series of sketchpad items, you need to use a `coroutines` item. This allows you to run multiple items (seemingly) in parallel. For example:\n\n1. Insert a `coroutines` item into the trial sequence.\n2. Set the duration of the `coroutines`, for example to 5000 ms.\n3. Add a `keyboard_response` to the `coroutines` and let it run for the entire duration of the `coroutines` by setting the start time to 0 and the end time to 5000 ms.\n4. Add multiple `sketchpad` items to the `coroutines` and use the start times for these items to show them at the appropriate moments.", "url": "https://forum.cogsci.nl", "title": "How to register key presses continuously while presenting a series of sketchpad items"}
{"content": "To add line breaks in OpenSesame text:\n\n1. Open the item (e.g., sketchpad, form_text_input, etc.) where you want to add line breaks.\n2. When entering text, you can typically enter multiple lines in the text input, and line breaks will be automatically inserted.\n3. When editing the script of an item, you need to manually indicate line breaks as shown below.\n4. In the item script, locate the text field where you need to insert line breaks.\n5. To add a line break, use the HTML tag `<br>` at the point where you want the text to start on a new line.\n6. If you need multiple consecutive line breaks, use multiple `<br>` tags.\n7. Save the changes to the item.\n8. Run the experiment to verify that the line breaks appear as expected.\n\nImportant side note: When running an experiment on the desktop, long lines are automatically wrapped so that they run out of the screen. However, when running an experiment in a browser with OSWeb, this doesn't happen, and you need to explicitly indicate line breaks to avoid lines from running out of the screen.", "url": "https://forum.cogsci.nl", "title": "How to add line breaks in OpenSesame text"}
{"content": "OpenSesame supports regular HTML formatting for text. To format text in OpenSesame using HTML tags:\n\n1. Identify the item (e.g., sketchpad, form_text_input, etc.) where you want to format the text.\n2. Use the appropriate HTML tags to format the text:\n   - For bold text, use `<b>text</b>`\n   - For italic text, use `<i>text</i>`\n   - For underlined text, use `<u>text</u>`\n   - For text color, use `<span style=\"color: red;\">text</span>` (replace \"red\" with the desired color)\n3. Apply the HTML tags around the text you want to format.\n4. Save the changes to the item.\n5. Run the experiment to verify that the text formatting appears as expected.", "url": "https://forum.cogsci.nl", "title": "How to format text in OpenSesame using HTML tags"}
{"content": "OpenSesame assumes that text is encoded in UTF-8 format and also uses UTF-8 for the log file.\n\nIf you find that text from a file, for example a source file for a LOOP table, is incorrectly encoded (because non-ASCII characters are not shown correctly), this generally means that the file uses a different file encoding. In that case, change the character encoding of the file to UTF-8, which is something that most text editors allow you to do. \n\nSimilarly, if you open an OpenSesame log file and find that it is incorrectly encoded (because non-ASCII characters are not shown correctly), indicate in the text editor or spreadsheet that the file is encoded using UTF-8.\n\nCharacter-encoding issues are especially common on Windows, because most versions of Windows do not use UTF-8 encoding by default.", "url": "https://forum.cogsci.nl", "title": "How to debug text encoding issues in OpenSesame"}
{"content": "To examine the data collected by an online experiment hosted through JATOS/ MindProbe:\n\n1. Log in to the JATOS server where the study is hosted, for example MindProbe.eu\n2. Navigate to the study and open the Study results page\n3. Click on 'Export Results' and select the file format (e.g. JATOS Results Archive or Data only)\n4. In OpenSesame, open the OSWeb and JATOS control panel, and use the convert OSWeb results to .csv/ .xlsx option\n4. Open the converted .csv / .xlsx file in a spreadsheet or text editor \n5. Each row corresponds to one variable logging operation, which is typically one trial (although that depends on the structure of your experiment)\n6. Check that all expected variables are present and have sensible values\n7. Look for missing values, unexpected repetitions, or other anomalies\n8. If data appears to be missing or incorrect, proceed to further troubleshooting", "url": "https://forum.cogsci.nl", "title": "How to examine the data after running an experiment online"}
{"content": "If an experiment hosted online through JATOS/ MindProbe is not correctly logging data, you can troubleshoot by:\n\n1. Running the experiment locally, after enabling in OSWeb by selecting 'In a browser with OSWeb' in the experiment properties, to check for error messages in the browser console (F12)  \n2. Checking that all variables are initialized with default values at the start of the experiment \n3. Verifying that variables are set correctly in each trial, for example in an INLINE_JAVASCRIPT item\n4. Confirming that a LOGGER is executed at the end of each trial to write variables to the log \n5. Checking that no JATOS or JavaScript errors occur in the browser console when the experiment is run on JATOS\n6. Testing whether data is stored correctly if the experiment is aborted or navigated away from prematurely", "url": "https://forum.cogsci.nl", "title": "How to troubleshoot data logging issues in online experiments"}
{"content": "To find Eye Trackers that are compatible with OpenSesame:\n\n1. Visit the OpenSesame website (https://osdoc.cogsci.nl/).\n2. Look for the \"Eye tracking\" category in the documentation under Manual.\n3. Review the list of Eye Trackers that are currently supported by OpenSesame. This list includes popular brands such as EyeLink, SMI, and Tobii.\n4. Check the specific models and versions of each Eye Tracker brand to ensure compatibility with your setup.\n5. If your Eye Tracker is not listed, search the OpenSesame forums or contact the developers to inquire about potential support for your specific device.", "url": "https://forum.cogsci.nl", "title": "How to find Eye Trackers compatible with OpenSesame"}
{"content": "To set up an Eye Tracker in OpenSesame:\n\n1. Ensure that your eye tracker is supported by OpenSesame.\n2. Install the required Eye Tracker drivers and software on your computer, following the manufacturer's instructions.\n3. Connect your Eye Tracker to your computer using the appropriate cables or wireless connections.\n4. Launch OpenSesame and create a new experiment or open an existing one.\n5. Add a `pygaze_init` item to your experiment sequence to initialize the Eye Tracker connection.\n6. Configure the `pygaze_init` item by selecting your Eye Tracker brand and model from the dropdown menu and specifying any additional settings (e.g., calibration type, sample rate).\n7. Add a `pygaze_calibrate` item to your experiment sequence to perform the necessary calibration procedure for your Eye Tracker.\n8. Use `pygaze_start_recording` and `pygaze_stop_recording` items to control when the Eye Tracker starts and stops collecting data during your experiment.\n9. You can also start from the \"Eye Tracking Template\", which already provides the basic structure of an eye tracking experiment.", "url": "https://forum.cogsci.nl", "title": "How to set up an Eye Tracker in OpenSesame"}
{"content": "To migrate an OpenSesame experiment from an older version to version 4.0:\n\n1. Review the 4.0 release notes at: https://osdoc.cogsci.nl/4.0/notes/400/\n2. Open the experiment in OpenSesame 4.0.\n3. Review the script for any deprecated functions or syntax changes.\n4. In inline_script tiems, remove any `exp.` or `var.` prefixes before variable names. In OpenSesame 4.0, variables are globals and not properties of the `var` or `exp` object.\n5. Replace `self.sleep()` with `clock.sleep()` for pausing execution.\n6. Test the script thoroughly to ensure all functionality works as expected.\n7. Save the updated script and use it in your experiment.", "url": "https://forum.cogsci.nl", "title": "How to migrate an OpenSesame experiment from older version (3.2 or 3.3) to version 4.0"}
{"content": "To replace the deprecated `self.copy_sketchpad()` function:\n\n1. Identify where `self.copy_sketchpad()` is used in your script.\n2. Remove the `self.` prefix. The function is simply called `copy_sketchpad()` in recent versions of OpenSesame.\n3. Repeat this process for all occurrences of `self.copy_sketchpad()` in your script.", "url": "https://forum.cogsci.nl", "title": "How to replace the deprecated `self.copy_sketchpad()` function"}
{"content": "To pause execution in OpenSesame 4.0:\n\n\n1. Identify where you need to pause execution in your script.\n2. Use `clock.sleep()` (e.g., `clock.sleep(1000)` to pause for 1000 milliseconds, or 1 second).\n3. Ensure that the pause duration is specified in milliseconds.\n4. Use `clock.sleep()` consistently throughout your script for any pauses in execution. Do not use `self.sleep()`, which is deprecated, or `time.sleep()`, which is from the Python standard library and is not optimized for accurate timing.", "url": "https://forum.cogsci.nl", "title": "How to pause execution in OpenSesame 4.0"}
{"content": "There are different kinds of response button boxes, which differ in how OpenSesame uses them.\n\n- A button box that acts as a regular keyboard can be used with the `keyboard_response` item. This is the most common. To find out what the buttons are called (e.g. 1, 2, and 3), you can create a simple experiment in which you collect a button press with a `keyboard_response` item and then show the `response` on a `feedback` item immediately after.\n- A button box that acts a serial-reponse (SR) box can be used with the `srbox` plug-in. The SRBox is an older button box that was developed by psychology software tools. Some other button boxes produced by other manufacturers are based on the `srbox` and can be used in the same way.\n- Any other type of button box. Visit the website of the manufacturer to find out whether and how you can use the button box in Python. And then use an `inline_script` to use the button box in your experiment.", "url": "https://forum.cogsci.nl", "title": "How to set up an external response button box in OpenSesame"}
{"content": "To create a spelling bee task in OpenSesame:\n\n1. Create a block_loop item and define your word list as a variable (e.g., `word`).\n2. Add a sampler item to the trial sequence to present the word to be spelled. Set the sound file to '{word}.wav' to use the current word from the block_loop.\n3. Add a `form_text_input` item to collect the participant's response.\n4. Add an `inline_script` item to process the participant's response and check if it matches the correct spelling of the word.\n5. Add a feedback item (e.g., sketchpad or sampler) to provide feedback on the participant's performance (correct/incorrect).", "url": "https://forum.cogsci.nl", "title": "How to create a spelling bee task in OpenSesame"}
{"content": "To use a `form_text_input` item to collect typed responses:\n\n1. Add a `form_text_input` item to your trial sequence.\n2. In the question field, enter the question or prompt for the participant (e.g., \"Please type the word you heard:\").\n3. Set the 'Timeout' to a suitable duration (e.g., 10000 ms) or 'infinite' if you don't want a timeout.", "url": "https://forum.cogsci.nl", "title": "How to use a form_text_input item to collect typed responses"}
{"content": "To compare the participant's response to the correct answer using Python inline script:\n\n```python\nif response == correct_response:\n    feedback_msg = \"Correct!\"\n    correct = 1\nelse:\n    feedback_msg = \"Incorrect. The correct spelling is: \" + correct_response\n    correct = 0\n```\n\n1. Assume that the participant's response is stored in a variable named 'response' and the correct answer is stored in a variable named 'correct_response'.\n2. Use an if-else statement to compare the 'response' to the 'correct_response'.\n3. If the response matches the correct answer, set the feedback message to \"Correct!\" and the 'correct' variable to 1.\n4. If the response does not match the correct answer, set the feedback message to \"Incorrect. The correct spelling is: \" followed by the correct answer, and set the 'correct' variable to 0.\n5. Use the 'feedback_msg' variable in a feedback item to display the appropriate message to the participant.", "url": "https://forum.cogsci.nl", "title": "How to compare the participant's response to the correct answer using Python inline script"}
{"content": "To log the participant's response, correctness, and other trial information:\n\n1. Add a logger item to your trial sequence, typically at the end of the trial.\n2. In the 'Include' field, specify the variables you want to log (e.g., response, correct, RT, word). Alternatively, enable 'Automatically log all variables' to log all variables without specifying them individually.\n3. The location of the log file is specified when the experiment is started.\n4. The format of the log file is a utf-8 encoded `.csv` file.", "url": "https://forum.cogsci.nl", "title": "How to log the participant's response, correctness, and other trial information"}
{"content": "To provide visual feedback using a feedback item:\n\n1. Add a feedback item to your trial sequence, typically after the response processing inline_script.\n2. In the feedback item, create a text element by clicking the 'Draw textline' button.\n3. Set the 'Text' field to '{feedback_msg}', assuming you have defined the feedback message elsewhere in the experiment, for example in an inline_script item.\n4. Adjust the font, size, and color of the text as desired.\n5. Set the 'Duration' of the feedback item to a suitable value (e.g., 1000 ms) to control how long the feedback is displayed.", "url": "https://forum.cogsci.nl", "title": "How to provide visual feedback using a feedback item"}
{"content": "To troubleshoot OpenSesame experiments that fail to open:\n\n1. Check the console for specific error messages that indicate the cause of the failure.\n2. If possible, open a backup copy of the experiment from before the error occurred.\n3. Try running the experiment on a different computer or with a different version of OpenSesame to isolate the issue.", "url": "https://forum.cogsci.nl", "title": "How to troubleshoot OpenSesame experiments that fail to open"}
{"content": "OpenSesame automatically creates backups periodically. You can find those under Tools > Open backup folder. To create additional backups of OpenSesame experiments:\n\n1. Use the \"Save as...\" option in OpenSesame to create a copy of your experiment before making significant changes.\n2. Store backup copies of your experiment on a separate storage device or cloud service for added protection.\n3. Consider using version control software like Git, the OSF, or JATOS to track changes and revert to previous versions if needed.", "url": "https://forum.cogsci.nl", "title": "How to create backups of OpenSesame experiments"}
{"content": "To set up an SMI RED 500 eye tracker with OpenSesame:\n\n1. Install the iView X SDK on a Windows computer, as it is required for the SMI RED 500 eye tracker to communicate with OpenSesame.\n2. Install OpenSesame on the same Windows computer.\n3. Install the PyGaze library in OpenSesame (it is bundled in the default window package), which will be used to interact with the iView X SDK and the SMI RED 500 eye tracker.\n4. Connect the SMI RED 500 eye tracker to the Windows computer using the appropriate cables.\n5. Launch the iView X SDK server to establish communication between the eye tracker and the computer.\n6. Use the PyGaze items within OpenSesame to calibrate the eye tracker and collect eye tracking data during your experiment.", "url": "https://forum.cogsci.nl", "title": "How to set up an SMI RED 500 eye tracker with OpenSesame"}
{"content": "To explore eye tracking solutions for OpenSesame:\n\n1. Research eye trackers that are compatible with OpenSesame, such as EyeLink, EyeTribe, GazePoint, SMI, or Tobii.\n2. Investigate if these eye trackers have cross-platform compatibility (e.g., Windows, macOS, Linux) and if they require proprietary software.\n3. Compare the features, accuracy, and pricing of these alternative eye trackers to determine if they meet your research requirements and budget.\n4. Reach out to the OpenSesame community or the manufacturers of the eye trackers for guidance and support in integrating these devices with OpenSesame.", "url": "https://forum.cogsci.nl", "title": "How to explore eye tracking solutions for OpenSesame"}
